import logging
import time
from typing import Dict, Any, List, Literal, Annotated
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, START, END, MessagesState
from langgraph.prebuilt import create_react_agent, InjectedState
from langgraph.types import Command, interrupt


from app.config.settings import LLM_MODEL
from app.graph.state import PYMESState
from app.services.memory_service import get_memory_service

logger = logging.getLogger(__name__)

# === FUNCIONES AUXILIARES ===

def get_thread_id_from_state(state: PYMESState) -> str:
    """Extrae thread_id del estado."""
    # Intentar obtener de diferentes fuentes
    thread_id = state.get("thread_id")
    
    if not thread_id:
        messages = state.get("messages", [])
        for msg in messages:
            if hasattr(msg, 'additional_kwargs') and msg.additional_kwargs.get('thread_id'):
                return msg.additional_kwargs['thread_id']
    
    return thread_id or f"temp_{int(time.time())}"

def extract_business_info_from_conversation(messages: List, current_state: PYMESState) -> Dict[str, Any]:
    """Extrae informaci√≥n del negocio de la conversaci√≥n actual."""
    try:
        # Obtener informaci√≥n existente
        existing_info = current_state.get("business_info", {})
        
        # Buscar informaci√≥n en los mensajes m√°s recientes
        recent_content = ""
        for msg in messages[-3:]:  # √öltimos 3 mensajes
            if isinstance(msg, HumanMessage):
                recent_content += f"Usuario: {msg.content}\n"
            elif isinstance(msg, AIMessage):
                recent_content += f"Asistente: {msg.content}\n"
        
        # L√≥gica simple de extracci√≥n (en producci√≥n usar√≠as un LLM con structured output)
        updated_info = existing_info.copy()
        
        # Extraer nombre de empresa
        if not updated_info.get("nombre_empresa"):
            if "empresa" in recent_content.lower() or "negocio" in recent_content.lower():
                lines = recent_content.split('\n')
                for line in lines:
                    if any(keyword in line.lower() for keyword in ["empresa", "negocio", "llamo", "llama"]):
                        # L√≥gica simple de extracci√≥n
                        words = line.split()
                        if len(words) > 2:
                            updated_info["nombre_empresa"] = ' '.join(words[2:5])  # Tomar algunas palabras
                        break
        
        # Extraer sector
        if not updated_info.get("sector"):
            sector_keywords = ["restaurante", "software", "retail", "construcci√≥n", "salud", "educaci√≥n"]
            for keyword in sector_keywords:
                if keyword in recent_content.lower():
                    updated_info["sector"] = keyword.capitalize()
                    break
        
        # Solo retornar si hay informaci√≥n nueva
        if updated_info != existing_info:
            return updated_info
        
        return None
        
    except Exception as e:
        logger.error(f"Error extrayendo informaci√≥n del negocio: {str(e)}")
        return None

def extract_research_from_messages(messages: List) -> str:
    """Extrae contenido de investigaci√≥n de los mensajes."""
    try:
        research_content = ""
        for msg in messages:
            if isinstance(msg, AIMessage) and msg.content:
                content = msg.content
                # Buscar indicadores de investigaci√≥n
                if any(keyword in content.lower() for keyword in ["investigaci√≥n", "an√°lisis", "oportunidades", "tendencias", "mercado"]):
                    research_content += content + "\n"
        
        return research_content.strip() if research_content else None
        
    except Exception as e:
        logger.error(f"Error extrayendo investigaci√≥n: {str(e)}")
        return None

# === HERRAMIENTAS DE HANDOFF ENTRE AGENTES ===

def create_handoff_tool(*, agent_name: str, description: str | None = None):
    """Crea una herramienta de handoff siguiendo el patr√≥n LangGraph."""
    name = f"transfer_to_{agent_name}"
    description = description or f"Transfer control to {agent_name} agent."

    @tool(name, description=description)
    def handoff_tool(
        task_description: Annotated[
            str,
            "Description of what the next agent should do, including all relevant context.",
        ],
        state: Annotated[PYMESState, InjectedState],
    ) -> Command:
        """Execute handoff to the specified agent."""
        # Create task message for the next agent
        task_message = AIMessage(content=f"Transferring to {agent_name}: {task_description}")
        
        return Command(
            goto=agent_name,
            update={
                "messages": [task_message],
                "current_agent": agent_name,
                "last_handoff": task_description
            }
        )
    
    return handoff_tool

# Crear herramientas de handoff espec√≠ficas
transfer_to_info_extractor = create_handoff_tool(
    agent_name="info_extractor",
    description="Transfer to the business information extraction specialist when you need to collect or update basic company data."
)

transfer_to_researcher = create_handoff_tool(
    agent_name="researcher", 
    description="Transfer to the market research specialist when you need to analyze market opportunities, trends, or competitive research."
)

transfer_to_consultant = create_handoff_tool(
    agent_name="consultant",
    description="Transfer to the conversational consultant for general questions, specific doubts, or fluid business conversation."
)

@tool
def get_business_info_status():
    """Verificar el estado actual de la informaci√≥n del negocio recopilada."""
    # Esta herramienta checkear√° el estado actual
    return "Informaci√≥n del negocio: En progreso/Completa/Faltante"

@tool
def get_research_status():
    """Verificar si ya se ha realizado investigaci√≥n de mercado para este negocio."""
    return "Investigaci√≥n: No iniciada/En progreso/Completada"

# === PROMPTS PARA CADA AGENTE ===

SUPERVISOR_PROMPT = """
Eres el SUPERVISOR de un equipo de consultores especializados en PYMES. Tu trabajo es coordinar y dirigir las conversaciones hacia el agente correcto.

AGENTES DISPONIBLES:
1. **info_extractor**: Especialista en recopilar informaci√≥n b√°sica del negocio (nombre, sector, productos, desaf√≠os, ubicaci√≥n, etc.)
2. **researcher**: Especialista en investigaci√≥n de mercado, an√°lisis de oportunidades y tendencias del sector
3. **consultant**: Consultor conversacional para dudas espec√≠ficas, preguntas generales y asesoramiento personalizado

ESTADO ACTUAL:
- Informaci√≥n del negocio: {business_info_status}
- Investigaci√≥n realizada: {research_status}

REGLAS DE DECISI√ìN:
1. Si NO hay informaci√≥n b√°sica del negocio ‚Üí **transfer_to_info_extractor**
2. Si hay informaci√≥n b√°sica pero NO hay investigaci√≥n ‚Üí **transfer_to_researcher** 
3. Si el usuario hace preguntas espec√≠ficas o quiere conversar ‚Üí **transfer_to_consultant**
4. Si el usuario quiere actualizar/corregir informaci√≥n ‚Üí **transfer_to_info_extractor**
5. Si el usuario quiere nueva investigaci√≥n ‚Üí **transfer_to_researcher**

Analiza el mensaje del usuario y el estado actual, luego transfiere al agente apropiado.
NO intentes responder directamente - siempre transfiere a un especialista.
"""

INFO_EXTRACTOR_PROMPT = """
Eres un ESPECIALISTA EN RECOPILACI√ìN DE INFORMACI√ìN EMPRESARIAL para PYMES.

Tu trabajo es recopilar de manera conversacional y amigable la siguiente informaci√≥n:

INFORMACI√ìN REQUERIDA:
- üè¢ **Nombre de la empresa**
- üè≠ **Sector/Industria** (ej: "Restaurantes", "Software", "Retail")
- üíº **Productos/Servicios principales** 
- ‚ö†Ô∏è **Desaf√≠os principales** del negocio
- üìç **Ubicaci√≥n** de operaci√≥n
- üìù **Descripci√≥n** del negocio

INFORMACI√ìN OPCIONAL:
- A√±os de operaci√≥n
- N√∫mero de empleados

INSTRUCCIONES:
- Haz UNA pregunta espec√≠fica a la vez
- S√© conversacional y emp√°tico
- Confirma informaci√≥n antes de continuar
- Usa ejemplos para ayudar al usuario
- Cuando tengas TODA la informaci√≥n requerida, usa **transfer_to_researcher**

HERRAMIENTAS DISPONIBLES:
- transfer_to_researcher: Cuando tengas informaci√≥n completa
- transfer_to_consultant: Si el usuario tiene dudas no relacionadas con datos b√°sicos
"""

RESEARCHER_PROMPT = """
Eres un ESPECIALISTA EN INVESTIGACI√ìN DE MERCADO Y OPORTUNIDADES para PYMES.

Tu trabajo es:
1. Analizar la informaci√≥n del negocio disponible
2. Realizar investigaci√≥n web espec√≠fica sobre:
   - Tendencias del sector
   - Oportunidades de mercado
   - Mejores pr√°cticas
   - An√°lisis competitivo
   - Soluciones a desaf√≠os identificados
3. Presentar an√°lisis y recomendaciones estructuradas

HERRAMIENTAS DISPONIBLES:
- search: B√∫squeda web para investigaci√≥n de mercado
- transfer_to_consultant: Para conversaci√≥n sobre los resultados
- transfer_to_info_extractor: Si necesitas m√°s informaci√≥n del negocio

Cuando presentes resultados, s√© espec√≠fico y pr√°ctico. Pregunta al usuario si quiere profundizar en alg√∫n √°rea espec√≠fica.
"""

CONSULTANT_PROMPT = """
Eres un CONSULTOR CONVERSACIONAL especializado en PYMES.

Tu trabajo es:
- Responder preguntas espec√≠ficas sobre el negocio
- Brindar asesoramiento personalizado
- Aclarar dudas sobre recomendaciones
- Mantener conversaci√≥n fluida y √∫til
- Generar planes de acci√≥n detallados

HERRAMIENTAS DISPONIBLES:
- search: B√∫squeda web para informaci√≥n espec√≠fica
- search_documents: B√∫squeda en documentos internos
- transfer_to_info_extractor: Si necesitas actualizar informaci√≥n b√°sica
- transfer_to_researcher: Si necesitas nueva investigaci√≥n

Eres emp√°tico, pr√°ctico y orientado a resultados. Siempre busca ser √∫til y accionable.
"""

# === FUNCIONES DE ESTADO ===

def get_business_info_status_from_state(state: PYMESState) -> str:
    """Obtiene el estado actual de la informaci√≥n del negocio."""
    business_info = state.get("business_info", {})
    required_fields = ["nombre_empresa", "sector", "productos_servicios_principales", "ubicacion"]
    
    if not business_info:
        return "No iniciada"
    
    missing_fields = [field for field in required_fields if not business_info.get(field)]
    
    if not missing_fields:
        return "Completa"
    elif len(missing_fields) < len(required_fields):
        return "Parcial"
    else:
        return "Faltante"

def get_research_status_from_state(state: PYMESState) -> str:
    """Obtiene el estado actual de la investigaci√≥n."""
    context = state.get("context", "")
    web_search = state.get("web_search", "")
    stage = state.get("stage", "")
    
    if stage == "research_completed" or context or web_search:
        return "Completada"
    elif stage == "research_in_progress":
        return "En progreso"
    else:
        return "No iniciada"

# === NODOS DE AGENTES ===

def supervisor_node(state: PYMESState) -> Dict[str, Any]:
    """Nodo supervisor que decide qu√© agente usar usando handoffs."""
    try:
        logger.info("Supervisor analizando situaci√≥n...")
        
        business_info_status = get_business_info_status_from_state(state)
        research_status = get_research_status_from_state(state)
        
        messages = state.get("messages", [])
        last_message = messages[-1] if messages else None
        user_message = last_message.content if isinstance(last_message, HumanMessage) else ""
        
        # L√≥gica de decisi√≥n del supervisor (sin LLM para simplicidad)
        logger.info(f"Estado info: {business_info_status}, investigaci√≥n: {research_status}")
        
        # Decisiones basadas en reglas claras
        if business_info_status in ["No iniciada", "Faltante", "Parcial"]:
            agent_target = "info_extractor"
            task_desc = "Recopilar informaci√≥n b√°sica del negocio que falta"
        elif business_info_status == "Completa" and research_status == "No iniciada":
            agent_target = "researcher"
            task_desc = "Realizar investigaci√≥n de mercado basada en la informaci√≥n del negocio"
        else:
            agent_target = "consultant"
            task_desc = "Proporcionar asesoramiento conversacional"
        
        logger.info(f"Supervisor decidi√≥: {agent_target} - {task_desc}")
        
        # Usar Command para handoff
        return {
            "current_agent": agent_target,
            "last_handoff": task_desc,
            "messages": [AIMessage(content=f"Transfiriendo a {agent_target}: {task_desc}")]
        }
        
    except Exception as e:
        logger.error(f"Error en supervisor_node: {str(e)}")
        # Fallback: ir al consultor si hay error
        return {
            "current_agent": "consultant",
            "messages": [AIMessage(content="Error en supervisor, transfiriendo al consultor...")]
        }

@tool
def save_business_info(info: str):
    """Guardar informaci√≥n del negocio extra√≠da en memoria a largo plazo."""
    try:
        # Esta herramienta simula el guardado - en realidad se manejar√° en el nodo
        logger.info(f"Guardando informaci√≥n del negocio: {info}")
        return "Informaci√≥n guardada exitosamente en memoria a largo plazo"
    except Exception as e:
        logger.error(f"Error guardando informaci√≥n: {str(e)}")
        return "Error guardando informaci√≥n"

def info_extractor_agent_node(state: PYMESState) -> Dict[str, Any]:
    """Agente especializado en extracci√≥n de informaci√≥n del negocio."""
    try:
        logger.info("Agente extractor de informaci√≥n activado")
        
        llm = ChatOpenAI(model=LLM_MODEL, temperature=0.1)
        
        # Obtener informaci√≥n actual del negocio
        business_info = state.get("business_info", {})
        messages = state.get("messages", [])
        
        # Extraer nueva informaci√≥n de los mensajes recientes
        updated_info = extract_business_info_from_conversation(messages, state) or business_info
        
        # Determinar qu√© informaci√≥n falta
        required_fields = ["nombre_empresa", "sector", "productos_servicios_principales", "ubicacion"]
        missing_fields = [field for field in required_fields if not updated_info.get(field)]
        
        # Generar pregunta espec√≠fica o completar si ya tenemos todo
        if missing_fields:
            # Generar pregunta para el primer campo faltante
            field = missing_fields[0]
            field_questions = {
                "nombre_empresa": "¬øCu√°l es el nombre de tu empresa o negocio?",
                "sector": "¬øEn qu√© sector o industria opera tu negocio? (por ejemplo: restaurantes, software, retail, etc.)",
                "productos_servicios_principales": "¬øCu√°les son los principales productos o servicios que ofreces?",
                "ubicacion": "¬øD√≥nde opera tu negocio? (ciudad, pa√≠s, o si es online)"
            }
            
            question = field_questions.get(field, "¬øPodr√≠as proporcionar m√°s informaci√≥n sobre tu negocio?")
            
            return {
                "messages": [AIMessage(content=question)],
                "current_agent": "info_extractor",  # Permanecer en este agente
                "business_info": updated_info,  # Guardar info actualizada
                "stage": "info_gathering"
            }
        else:
            # Informaci√≥n completa, transferir al investigador
            logger.info("Informaci√≥n del negocio completa, transfiriendo al investigador")
            
            # Guardar en memoria
            memory_service = get_memory_service()
            thread_id = get_thread_id_from_state(state)
            memory_service.save_business_info(thread_id, updated_info)
            
            return {
                "messages": [AIMessage(content="¬°Perfecto! He recopilado toda la informaci√≥n de tu negocio. Ahora voy a investigar oportunidades espec√≠ficas para tu empresa.")],
                "current_agent": "researcher",  # Handoff al investigador
                "last_handoff": "Informaci√≥n completa, iniciar investigaci√≥n de mercado",
                "business_info": updated_info,
                "stage": "info_completed"
            }
        
    except Exception as e:
        logger.error(f"Error en info_extractor_agent_node: {str(e)}")
        return {"messages": [AIMessage(content="Hubo un error. ¬øPodr√≠as repetir tu informaci√≥n?")]}

@tool
def save_research_results(results: str):
    """Guardar resultados de investigaci√≥n en memoria a largo plazo."""
    try:
        logger.info(f"Guardando resultados de investigaci√≥n: {results[:100]}...")
        return "Resultados de investigaci√≥n guardados exitosamente"
    except Exception as e:
        logger.error(f"Error guardando investigaci√≥n: {str(e)}")
        return "Error guardando resultados"

def researcher_agent_node(state: PYMESState):
    """Agente especializado en investigaci√≥n de mercado."""
    try:
        logger.info("Agente investigador activado")
        
        llm = ChatOpenAI(model=LLM_MODEL, temperature=0.1)
        
        # Herramientas para el investigador
        from app.graph.nodes import search  # Importar herramienta de b√∫squeda existente
        researcher_tools = [search, transfer_to_consultant, transfer_to_info_extractor, save_research_results]
        
        # Crear agente ReAct con informaci√≥n del negocio en el prompt
        business_info = state.get("business_info", {})
        enhanced_prompt = RESEARCHER_PROMPT
        
        if business_info:
            business_context = f"\n\nINFORMACI√ìN DEL NEGOCIO DISPONIBLE:\n{business_info}\n\nUsa esta informaci√≥n para generar investigaci√≥n espec√≠fica y relevante."
            enhanced_prompt += business_context
        
        # Crear agente ReAct
        agent = create_react_agent(llm, researcher_tools, state_modifier=enhanced_prompt)
        
        # Ejecutar agente
        result = agent.invoke(state)
        
        # Guardar resultados de investigaci√≥n si se generaron
        messages = result["messages"]
        research_content = extract_research_from_messages(messages)
        
        if research_content:
            memory_service = get_memory_service()
            thread_id = get_thread_id_from_state(state)
            memory_service.save_research_results(thread_id, {"content": research_content, "timestamp": time.time()})
            
            return {
                "messages": result["messages"],
                "context": research_content,
                "web_search": "Investigaci√≥n completada",
                "stage": "research_completed"
            }
        
        return {"messages": result["messages"]}
        
    except Exception as e:
        logger.error(f"Error en researcher_agent_node: {str(e)}")
        return {"messages": [AIMessage(content="Hubo un error en la investigaci√≥n. Intentemos de nuevo.")]}

def consultant_agent_node(state: PYMESState):
    """Agente consultor conversacional (el chatbot original)."""
    try:
        logger.info("Agente consultor conversacional activado")
        
        llm = ChatOpenAI(model=LLM_MODEL, temperature=0.1)
        
        # Herramientas para el consultor
        from app.graph.nodes import search, search_documents
        consultant_tools = [search, search_documents, transfer_to_info_extractor, transfer_to_researcher]
        
        # Crear agente ReAct
        agent = create_react_agent(llm, consultant_tools, state_modifier=CONSULTANT_PROMPT)
        
        # Ejecutar agente
        result = agent.invoke(state)
        
        return {"messages": result["messages"]}
        
    except Exception as e:
        logger.error(f"Error en consultant_agent_node: {str(e)}")
        return {"messages": [AIMessage(content="Hubo un error. ¬øEn qu√© puedo ayudarte?")]}

def human_feedback_node(state: PYMESState):
    """Nodo de feedback humano mejorado para la arquitectura supervisor."""
    try:
        logger.info("Esperando feedback del usuario...")
        
        # Interrupt para esperar input del usuario
        user_input = interrupt({
            "message": "Esperando tu respuesta...",
            "status": "waiting_for_input"
        })
        
        logger.info(f"Feedback recibido: {user_input}")
        
        # Actualizar estado con el nuevo mensaje del usuario
        return {
            "messages": [HumanMessage(content=user_input)],
            "input": user_input
        }
        
    except Exception as e:
        logger.error(f"Error en human_feedback_node: {str(e)}")
        return {"messages": [HumanMessage(content="Error procesando entrada")]}

# === FUNCIONES DE ENRUTAMIENTO ===

def route_after_supervisor(state: PYMESState) -> Literal["info_extractor", "researcher", "consultant", "human_feedback"]:
    """Enruta despu√©s del supervisor basado en la decisi√≥n de transferencia."""
    # Verificar si hay un agente especificado en el estado
    current_agent = state.get("current_agent")
    if current_agent in ["info_extractor", "researcher", "consultant"]:
        return current_agent
    
    # Fallback: analizar mensajes para tool calls
    messages = state.get("messages", [])
    last_message = messages[-1] if messages else None
    
    if isinstance(last_message, AIMessage) and last_message.tool_calls:
        tool_call = last_message.tool_calls[0]
        tool_name = tool_call["name"]
        
        if tool_name == "transfer_to_info_extractor":
            return "info_extractor"
        elif tool_name == "transfer_to_researcher":
            return "researcher"  
        elif tool_name == "transfer_to_consultant":
            return "consultant"
    
    # Por defecto, ir a feedback humano
    return "human_feedback"

def route_after_agents(state: PYMESState) -> Literal["supervisor", "human_feedback"]:
    """Enruta despu√©s de los agentes especializados."""
    messages = state.get("messages", [])
    last_message = messages[-1] if messages else None
    
    # Si hay una transferencia pendiente, volver al supervisor
    if isinstance(last_message, AIMessage) and last_message.tool_calls:
        tool_call = last_message.tool_calls[0]
        if tool_call["name"].startswith("transfer_to_"):
            return "supervisor"
    
    # Si no hay transferencia, ir a feedback humano
    return "human_feedback"

def create_supervisor_pymes_graph():
    """
    Crea el grafo principal con arquitectura supervisor.
    """
    try:
        logger.info("Creando grafo supervisor PYMES...")
        
        # Crear el grafo
        workflow = StateGraph(PYMESState)
        
        # === AGREGAR NODOS ===
        workflow.add_node("supervisor", supervisor_node)
        workflow.add_node("info_extractor", info_extractor_agent_node)
        workflow.add_node("researcher", researcher_agent_node)
        workflow.add_node("consultant", consultant_agent_node)
        workflow.add_node("human_feedback", human_feedback_node)
        
        # === DEFINIR FLUJO ===
        
        # Inicio -> Supervisor
        workflow.add_edge(START, "supervisor")
        
        # Supervisor -> Agentes especializados o feedback
        workflow.add_conditional_edges(
            "supervisor",
            route_after_supervisor,
            {
                "info_extractor": "info_extractor",
                "researcher": "researcher", 
                "consultant": "consultant",
                "human_feedback": "human_feedback"
            }
        )
        
        # Agentes -> Supervisor o feedback humano
        workflow.add_conditional_edges(
            "info_extractor",
            route_after_agents,
            {
                "supervisor": "supervisor",
                "human_feedback": "human_feedback"
            }
        )
        
        workflow.add_conditional_edges(
            "researcher", 
            route_after_agents,
            {
                "supervisor": "supervisor",
                "human_feedback": "human_feedback"
            }
        )
        
        workflow.add_conditional_edges(
            "consultant",
            route_after_agents, 
            {
                "supervisor": "supervisor", 
                "human_feedback": "human_feedback"
            }
        )
        
        # Feedback humano -> Supervisor (para nueva decisi√≥n)
        workflow.add_edge("human_feedback", "supervisor")
        
        # === COMPILAR ===
        from app.database.postgres import get_postgres_saver, get_postgres_store
        
        store = get_postgres_store()
        checkpointer = get_postgres_saver()
        
        compiled_graph = workflow.compile(
            checkpointer=checkpointer,
            store=store
        )
        
        logger.info("Grafo supervisor PYMES compilado exitosamente")
        return compiled_graph
        
    except Exception as e:
        logger.error(f"Error creando grafo supervisor: {str(e)}")
        raise

# Funci√≥n de compatibilidad
def create_chat_graph():
    """Funci√≥n de compatibilidad que devuelve el nuevo grafo supervisor."""
    return create_supervisor_pymes_graph() 