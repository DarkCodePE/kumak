#!/usr/bin/env python3
"""
Script para simular el contexto empresarial basado en la conversaci√≥n de WhatsApp
"""

from app.graph.supervisor_architecture import create_supervisor_pymes_graph
from app.services.memory_service import get_memory_service
import asyncio

def simulate_previous_business_info():
    """Simular informaci√≥n empresarial previa basada en la conversaci√≥n"""
    print("üé≠ SIMULANDO CONTEXTO EMPRESARIAL PREVIO")
    print("=" * 50)
    
    # Informaci√≥n que deber√≠a existir basada en la conversaci√≥n previa
    simulated_business_info = {
        "nombre_empresa": "Poller√≠a Orlando",
        "sector": "Restaurante", 
        "productos_servicios_principales": "Pollos a la brasa, bebidas",
        "desafios_principales": "Competencia, costos",
        # ubicacion se agregar√° con el nuevo mensaje
    }
    
    print(f"üìä Informaci√≥n empresarial simulada:")
    for key, value in simulated_business_info.items():
        print(f"   {key}: {value}")
    
    return simulated_business_info

async def save_simulated_info():
    """Guardar informaci√≥n simulada en memoria"""
    print(f"\nüíæ GUARDANDO INFORMACI√ìN SIMULADA")
    print("=" * 50)
    
    try:
        memory_service = get_memory_service()
        thread_id = "whatsapp_51962933641"
        
        simulated_info = simulate_previous_business_info()
        
        # Guardar en memoria
        success = await memory_service.save_business_info(thread_id, simulated_info)
        
        if success:
            print("‚úÖ Informaci√≥n simulada guardada exitosamente")
        else:
            print("‚ùå Error guardando informaci√≥n simulada")
        
        # Verificar que se guard√≥
        loaded_info = memory_service.load_business_info(thread_id)
        print(f"üìä Informaci√≥n cargada despu√©s de guardar: {loaded_info}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return False

def test_enhanced_evaluator():
    """Probar el evaluator mejorado con informaci√≥n simulada"""
    print(f"\nüß™ PROBANDO EVALUATOR MEJORADO")
    print("=" * 50)
    
    try:
        # Crear grafo
        graph = create_supervisor_pymes_graph()
        thread_id = "whatsapp_51962933641"
        config = {"configurable": {"thread_id": thread_id}}
        
        # Simular mensaje de usuario
        from langgraph.types import Command
        message = "Tengo un local f√≠sico"
        
        print(f"üìä Simulando mensaje: {message}")
        print(f"üìä Thread ID: {thread_id}")
        
        # Ejecutar grafo con el mensaje
        result = graph.invoke(Command(resume=message), config)
        
        print(f"‚úÖ Grafo ejecutado exitosamente")
        
        # Verificar resultado
        business_info = result.get("business_info", {})
        print(f"üìä Business info resultante: {business_info}")
        
        # Verificar si tiene informaci√≥n completa
        expected_fields = ["nombre_empresa", "sector", "productos_servicios_principales", "ubicacion"]
        missing_fields = [field for field in expected_fields if not business_info.get(field)]
        
        if not missing_fields:
            print("‚úÖ ¬°Informaci√≥n completa! El contexto se carg√≥ correctamente")
        else:
            print(f"‚ö†Ô∏è Campos faltantes: {missing_fields}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return False

async def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO SIMULACI√ìN DE CONTEXTO EMPRESARIAL")
    print("=" * 60)
    
    # Paso 1: Simular informaci√≥n previa
    simulate_previous_business_info()
    
    # Paso 2: Guardar informaci√≥n simulada
    await save_simulated_info()
    
    # Paso 3: Probar evaluator mejorado
    test_enhanced_evaluator()
    
    print(f"\nüèÅ SIMULACI√ìN COMPLETADA")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main()) 